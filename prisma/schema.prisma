// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now())
  accounts      Account[]
  sessions      Session[]
  role          Role         @default(USER)
  collections   Collection[]
  packs         Pack[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  ADMIN
}

model Collection {
  id          String               @id @default(cuid())
  name        String
  createdAt   DateTime             @default(now())
  updatedAt   DateTime?
  user        User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  cards       CollectionsOnCards[]
}

model Card {
  id          String               @id @default(cuid())
  name        String
  description String
  image       String
  series      Series               @relation(fields: [seriesId], references: [id], onDelete: Cascade)
  seriesId    String
  packs       PacksOnCards[]
  collections CollectionsOnCards[]

}

model Series {
  id          String  @id @default(cuid())
  name        String
  description String
  coverImage  String
  cards       Card[]
  packs       Pack[]
}

model Pack {
  id        String         @id @default(cuid())
  name      String
  authorId  String
  author    User           @relation(fields: [authorId], references: [id])
  series    Series         @relation(fields: [seriesId], references: [id], onDelete: Cascade)
  seriesId  String
  cards     PacksOnCards[]
  type      PackType
}

model PacksOnCards {
  pack       Pack     @relation(fields: [packId], references: [id])
  packId     String
  card       Card     @relation(fields: [cardId], references: [id])
  cardId     String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([packId, cardId])
}

model CollectionsOnCards {
  collection   Collection @relation(fields: [collectionId], references: [id])
  collectionId String
  card         Card       @relation(fields: [cardId], references: [id])
  cardId       String
  assignedAt   DateTime   @default(now())
  assignedBy   String

  @@id([collectionId, cardId])
}

enum Rarity {
  COMMON
  UNCOMMON
  RARE
  VERYRARE
  EXTRARARE
  CHASE
  VARIANT
}

enum PackType {
  FREEBIE
  PROFREEBIE
  CARAT
  CREDIT
}